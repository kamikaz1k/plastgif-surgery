<!DOCTYPE html>
<html lang="en">

<head>
    <title>Gif Breakdown</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <script src="/lib/libgif.js"></script>
    <style>
    @media (min-width: 1200px) {
        .container{
            max-width: 970px;
        }
    }
    .padding-bottom {
        padding-bottom: 40px;
    }
    </style>
</head>

<body>
    <div class="container">
        <div class="page-header">
          <h1>Edit face positions</h1>
          <p class="frame-num">Generating Frames</p>
          <p class="frame-face-dims">{...}</p>
        </div>
    </div>
    <div class="container text-center">
        <div class="controls">
            <div class="btn btn-outline-primary prev">
                <span class="glyphicon glyphicon-menu-left" aria-hidden="true"></span> Prev
            </div>
            <div class="btn btn-outline-primary next">
                Next <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
            </div>
            <div class="btn btn-outline-primary draw-box">Box</div>
        </div>
        <img id="frame-viewer" src="{{gif_url}}" />
        <p id="face" style="visibility: hidden;">{{face_url}}</p>

        <img id="face" src="{{face_url}}"/>
        <div class="padding-bottom">
            <div class="btn btn-primary" id="generate-gif">Generate Gif</div>
        </div>
    </div>
    <script type="text/javascript">
        window.frames = {{framesJson}};
        document.addEventListener("DOMContentLoaded", function(event) {
            console.log("DOM fully loaded and parsed");
            var img = document.querySelector("#frame-viewer");
            window.rub = supa(img);

            disableControls();

            document.querySelector("#generate-gif").addEventListener('click', function() {
                // POST to "/breakdown/build"
                fetch("/breakdown/build", {
                    method: 'POST',
                    headers: {
                      'Accept': 'application/json',
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        gif_url: "{{gif_url}}",
                        face_url: "{{face_url}}",
                        frames: window.frames
                    })
                }).then(function(response) {
                    console.log(response);
                    if (response.redirected) {
                        window.location = response.url;
                    }
                });
            });

            function supa (imgElement) {
                if (/.*\.gif/.test(imgElement.src)) {
                    var rub = new SuperGif({ gif: imgElement, loop_mode: false, auto_play: false } );
                    rub.load(initGif);
                    return rub;
                }
            }

            function initGif() {
                console.log('oh hey, now the gif is loaded');
                window.rub.pause();
                window.rub.move_to(0);
                updateFrameIndicator();
                console.log("moved to first frame");

                attachClickListeners();
                console.log("click listeners attached");
                enableControls();
            }
        });

        function attachClickListeners() {
            var prev = document.querySelector(".prev");
            var next = document.querySelector(".next");

            prev.addEventListener('click', function() {
                incrementFrameAndUpdate(window.rub, -1);
            });

            next.addEventListener('click', function() {
                incrementFrameAndUpdate(window.rub, 1);
            });

            document.querySelector(".draw-box").addEventListener('click', function() {
                drawBoxOnFrame();
            });

        }

        function incrementFrameAndUpdate(rub, increment) {
            var curr = rub.get_current_frame();
            rub.move_to(curr + increment);
            updateFrameIndicator();
        }

        function updateFrameIndicator() {
            document.querySelector(".frame-num").innerHTML = "Frame: " + rub.get_current_frame();
            document.querySelector(".frame-face-dims").innerHTML = JSON.stringify(window.frames[rub.get_current_frame()]);
            drawBoxOnFrame();
        }

        function drawBoxOnFrame() {
            // clear frame by redrawing image before drawing new frame
            window.rub.move_to(window.rub.get_current_frame());

            var box = window.frames[window.rub.get_current_frame()];
            var c = rub.get_canvas();
            var ctx = c.getContext("2d");
            ctx.globalCompositeOperation = "source-over"; // layer on top
            ctx.strokeRect(box.face_box_x, box.face_box_y, box.face_box_w, box.face_box_h);
            // ctx.rect(box.face_box_x, box.face_box_y, box.face_box_w, box.face_box_h);
            // ctx.stroke();
        }

        function disableControls() {
            document.querySelectorAll(".controls .btn").forEach(el => {
                el.classList.add("disabled");
            });
        }

        function enableControls() {
            document.querySelectorAll(".controls .btn").forEach(el => {
                el.classList.remove("disabled");
            });
        }
    </script>
</body>

</html>